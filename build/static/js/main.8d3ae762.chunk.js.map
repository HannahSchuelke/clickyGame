{"version":3,"sources":["components/Nav/Nav.js","components/Header/Header.js","components/Footer/Footer.js","components/Container/Container.js","components/ClickItem/ClickItem.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","this","props","score","Component","Header","Footer","Container","children","ClickItem","onClick","handleClick","id","alt","name","src","image","Game","state","icons","topScore","handleItemClick","guessedCorrectly","newData","_this","map","item","newItem","Object","objectSpread","clicked","handleCorrectGuess","handleInCorrectGuess","_this$state","newScore","newTopScore","setState","shuffleData","resetData","data","i","length","j","Math","floor","random","temp","_this2","components_Nav_Nav","components_Header_Header","components_Container_Container","components_ClickItem_ClickItem","key","randomizer","components_Footer_Footer","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d3ae762.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Nav.css\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\n        <ul>\n          <li className=\"itemLeft\">Kitty Clicky Game</li>\n          <li className=\"itemRight\">Score: {this.props.score}</li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n  <header className=\"header\">\n    <h2>Test Your Memory!</h2>\n    <h3>\n      Click on an image to earn points, but don't click on any more than once!\n    </h3>\n  </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = props => (\n  <footer className=\"footer\">\n    <h5>Hannah Schuelke</h5>\n  </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <main className=\"container\">{props.children}</main>;\n\nexport default Container;","import React from \"react\";\nimport \"./ClickItem.css\";\n\n\nconst ClickItem = props => (\n    <div className=\"icons\" onClick={() => props.handleClick(props.id)}>\n        <div className=\"Container\">\n                    <img className=\"icon-img\" alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\nexport default ClickItem;","import React, { Component } from \"react\";\nimport icons from \"../../icon.json\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\n\nclass Game extends Component {\n    state = {\n        icons,\n        score: 0,\n        topScore: 0\n    }\n    componentDidMount() {\n        this.setState({ icons: this.shuffleData(this.state.icons) });\n    }\n    handleItemClick = id => {\n        let guessedCorrectly = false;\n        const newData = this.state.icons.map(item => {\n            // take every property of the item with spread operator\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newItem;\n        })\n        guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleInCorrectGuess(newData);\n    }\n    handleCorrectGuess = newData => {\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = newScore > topScore ? newScore : topScore;\n        this.setState({\n            icons: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        })\n\n    }\n    handleInCorrectGuess = newData => {\n        this.setState({\n            icons: this.resetData(newData),\n            score: 0\n        })\n    }\n    resetData = newData => {\n        const resetData = newData.map(item => ({ ...item, clicked: false }));\n        return this.shuffleData(resetData);\n    }\n    shuffleData = data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    }\n    render() {\n        return (\n\n            <div>\n                <Nav score={this.state.score} topScore={this.state.topScore} />\n                <Header />\n                <Container>\n                    {this.state.icons.map(item => (\n                        <ClickItem\n                            key={item.id}\n                            id={item.id}\n                            randomizer={!this.state.score && this.state.topScore}\n                            handleClick={this.handleItemClick}\n                            image={item.image}\n                        />\n                    ))}\n                </Container>\n                <Footer />\n            </div>\n        )\n    }\n}\nexport default Game;","import React from \"react\";\nimport Game from './components/Game';\n\nconst App = () => <Game />\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}