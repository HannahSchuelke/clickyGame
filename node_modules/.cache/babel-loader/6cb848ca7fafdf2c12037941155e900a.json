{"ast":null,"code":"import _objectSpread from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport icons from \"../../icon.json\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      icons: icons,\n      score: 0,\n      topScore: 0\n    };\n\n    _this.handleItemClick = function (id) {\n      var guessedCorrectly = false;\n\n      var newData = _this.state.icons.map(function (item) {\n        // take every property of the item with spread operator\n        var newItem = _objectSpread({}, item);\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n\n      guessedCorrectly ? _this.handleCorrectGuess(newData) : _this.handleInCorrectGuess(newData);\n    };\n\n    _this.handleCorrectGuess = function (newData) {\n      var _this$state = _this.state,\n          topScore = _this$state.topScore,\n          score = _this$state.score;\n      var newScore = score + 1;\n      var newTopScore = newScore > topScore ? newScore : topScore;\n\n      _this.setState({\n        icons: _this.shuffleData(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.handleInCorrectGuess = function (newData) {\n      _this.setState({\n        icons: _this.resetData(newData),\n        score: 0\n      });\n    };\n\n    _this.resetData = function (newData) {\n      var resetData = newData.map(function (item) {\n        return _objectSpread({}, item, {\n          clicked: false\n        });\n      });\n      return _this.shuffleData(resetData);\n    };\n\n    _this.shuffleData = function (data) {\n      var i = data.length - 1;\n\n      while (i > 0) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        icons: this.shuffleData(this.state.icons)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.icons.map(function (item) {\n        return React.createElement(ClickItem, {\n          key: item.id,\n          id: item.id,\n          randomizer: !_this2.state.score && _this2.state.topScore,\n          handleClick: _this2.handleItemClick,\n          image: item.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/HannahSchuelke/Documents/codingBootcamp/homeworks/AssignmentFourteen/clickygame/src/components/Game/Game.js"],"names":["React","Component","icons","Nav","Header","Footer","Container","ClickItem","Game","state","score","topScore","handleItemClick","id","guessedCorrectly","newData","map","item","newItem","clicked","handleCorrectGuess","handleInCorrectGuess","newScore","newTopScore","setState","shuffleData","resetData","data","i","length","j","Math","floor","random","temp","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport icons from \"../../icon.json\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\n\nclass Game extends Component {\n    state = {\n        icons,\n        score: 0,\n        topScore: 0\n    }\n    componentDidMount() {\n        this.setState({ icons: this.shuffleData(this.state.icons) });\n    }\n    handleItemClick = id => {\n        let guessedCorrectly = false;\n        const newData = this.state.icons.map(item => {\n            // take every property of the item with spread operator\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newItem;\n        })\n        guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleInCorrectGuess(newData);\n    }\n    handleCorrectGuess = newData => {\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = newScore > topScore ? newScore : topScore;\n        this.setState({\n            icons: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        })\n\n    }\n    handleInCorrectGuess = newData => {\n        this.setState({\n            icons: this.resetData(newData),\n            score: 0\n        })\n    }\n    resetData = newData => {\n        const resetData = newData.map(item => ({ ...item, clicked: false }));\n        return this.shuffleData(resetData);\n    }\n    shuffleData = data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    }\n    render() {\n        return (\n\n            <div>\n                <Nav score={this.state.score} topScore={this.state.topScore} />\n                <Header />\n                <Container>\n                    {this.state.icons.map(item => (\n                        <ClickItem\n                            key={item.id}\n                            id={item.id}\n                            randomizer={!this.state.score && this.state.topScore}\n                            handleClick={this.handleItemClick}\n                            image={item.image}\n                        />\n                    ))}\n                </Container>\n                <Footer />\n            </div>\n        )\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}